// This is an example schema, you should create your own

generator client {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output       = "../src/db"
  fileName     = "types.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ServerConfig {
  id                String    @id @default(dbgenerated("(UUID())")) @db.VarChar(36)
  serverId          String?   @unique @db.VarChar(100)
  prefix            String    @default(">/")
  logChannel        String?   @db.Text
  apiKey            String?   @db.Text
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.DateTime()
  apiErrorMessage   String?
  apiErrorTimestamp DateTime?

  @@map("server_config")
}

model InviteWordsBlacklist {
  id        String    @id @default(dbgenerated("(UUID())")) @db.VarChar(36)
  word      String    @unique
  enabled   Boolean   @default(true)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.DateTime()

  @@map("invite_words_blacklist")
}

model DomainWhitelist {
  id                  String              @id @default(dbgenerated("(UUID())")) @db.VarChar(36)
  domain              String              @unique @db.VarChar(255)
  enabled             Boolean             @default(true)
  whitelistImportType WhitelistImportType @default(manual)
  createdAt           DateTime?           @default(now())
  updatedAt           DateTime?           @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.DateTime()

  @@map("domain_whitelist")
}

model DictionaryBlacklist {
  id                  String              @id @default(dbgenerated("(UUID())")) @db.VarChar(36)
  domain              String              @unique @db.VarChar(255)
  enabled             Boolean             @default(true)
  blacklistImportType BlacklistImportType @default(dictionary)
  createdAt           DateTime?           @default(now())
  updatedAt           DateTime?           @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.DateTime()

  @@map("dictionary_blacklist")
}

enum BlacklistImportType {
  api
  dictionary
}

enum WhitelistImportType {
  manual
  api
}
